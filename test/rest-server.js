// Generated by CoffeeScript 1.7.1
(function() {
  var Q, Server, mongojs, request, should;

  should = require('should');

  request = require('supertest');

  Q = require('q');

  Server = require('../server');

  mongojs = require('mongojs');

  describe('RestSevice', function() {
    before(function(done) {
      var server;
      server = new Server();
      server.start();
      this.url = "http://localhost:8080";
      this.checkEntryFormatPostJSON = function(entry) {
        entry.should.have.property('_id')["with"].type('string');
        entry.should.have.property('name')["with"].type('string');
        entry.should.have.property('superNode')["with"].type('boolean');
        entry.should.have.property('type')["with"].type('string');
        entry.should.have.property('links');
        return Array.isArray(entry.links).should.equal(true);
      };
      this.checkEntryFormatPreJSON = function(entry) {
        entry._id = entry._id.toString();
        return this.checkEntryFormatPostJSON(entry);
      };
      return done();
    });
    describe('First level of beer styles and links', function() {
      var address;
      address = '/getData';
      return it('Should have a correctly structured json object', function(done) {
        return request(this.url).get(address).expect('Content-Type', /json/).expect(200).end((function(_this) {
          return function(err, res) {
            var el, responseData, _i, _len;
            responseData = JSON.parse(res.body);
            if (err) {
              throw err;
            }
            responseData.length.should.not.equal(0);
            for (_i = 0, _len = responseData.length; _i < _len; _i++) {
              el = responseData[_i];
              _this.checkEntryFormatPostJSON(el);
            }
            return done();
          };
        })(this));
      });
    });
    describe('Getting a database entry (beer, food, beer style) by an ID', function() {
      before(function(done) {
        this.server = new Server();
        return done();
      });
      it('Should reject when supplied with null', function(done) {
        return this.server._getEntryById(null).then(function(value) {
          throw value;
        }, function(err) {
          (err === null).should.be["false"];
          return done();
        });
      });
      it('Should reject when supplied with a number', function(done) {
        return this.server._getEntryById(40).then(function(value) {
          throw value;
        }, function(err) {
          (err === null).should.be["false"];
          return done();
        });
      });
      it('Should reject when supplied with non existant ID as string', function(done) {
        return this.server._getEntryById("aaaaaaaaaaaaaaaaaaaaaaaa").then(function(value) {
          throw value;
        }, function(err) {
          (err === null).should.be["false"];
          return done();
        });
      });
      it('Should reject when supplied with non existant ID as an objectId', function(done) {
        return this.server._getEntryById(mongojs.ObjectId("aaaaaaaaaaaaaaaaaaaaaaaa")).then(function(value) {
          throw value;
        }, function(err) {
          (err === null).should.be["false"];
          return done();
        });
      });
      it('Should reject when supplied with an incorrectly formatted ID', function(done) {
        return this.server._getEntryById("invalid").then(function(value) {
          throw value;
        }, function(err) {
          (err === null).should.be["false"];
          return done();
        });
      });
      it('Should return correctly formatted object when give correct ID as a string', function(done) {
        return this.server._getEntryById("5395ba367b5c62a002b8dc51").then((function(_this) {
          return function(doc) {
            doc.should.have.type('object');
            _this.checkEntryFormatPreJSON(doc);
            return done();
          };
        })(this), function(err) {
          throw err;
        });
      });
      return it('Should return object when give correct ID as an objectID', function(done) {
        return this.server._getEntryById(mongojs.ObjectId("5395ba367b5c62a002b8dc4b")).then((function(_this) {
          return function(doc) {
            doc.should.have.type('object');
            _this.checkEntryFormatPreJSON(doc);
            return done();
          };
        })(this), function(err) {
          throw err;
        });
      });
    });
    return describe('Get multiple database entries (beer, food, beer style) from array of ID\'s', function() {
      before(function(done) {
        this.server = new Server();
        return done();
      });
      it('Should fail if given something other than an array', function(done) {
        return this.server._getListOfEntriesById("entry").then((function(_this) {
          return function(value) {
            throw value;
          };
        })(this), (function(_this) {
          return function(err) {
            (err === null).should.be["false"];
            return done();
          };
        })(this));
      });
      it('Should fail if one (or more) of the ID\'s is invalid', function(done) {
        return this.server._getListOfEntriesById(["5395ba357b5c62a002b8dc0b", "invalid"]).then((function(_this) {
          return function(value) {
            throw value;
          };
        })(this), (function(_this) {
          return function(err) {
            (err === null).should.be["false"];
            return done();
          };
        })(this));
      });
      it('Should fail if one (or more) of the ID\'s does not exist', function(done) {
        return this.server._getListOfEntriesById(["5395ba357b5c62a002b8dc1b", "5395ba357b5c62a002g8dc0a"]).then((function(_this) {
          return function(value) {
            throw value;
          };
        })(this), (function(_this) {
          return function(err) {
            (err === null).should.be["false"];
            return done();
          };
        })(this));
      });
      it('Should fail if given an empty list', function(done) {
        return this.server._getListOfEntriesById([]).then((function(_this) {
          return function(value) {
            throw value;
          };
        })(this), (function(_this) {
          return function(err) {
            (err === null).should.be["false"];
            return done();
          };
        })(this));
      });
      it('Should return an array of valid objects given a list of valid ID\'s as strings', function(done) {
        return this.server._getListOfEntriesById(["5395ba357b5c62a002b8dc0b", "5395ba357b5c62a002b8dc0a", "5395ba357b5c62a002b8dc09"]).then((function(_this) {
          return function(docs) {
            var doc, _i, _len;
            for (_i = 0, _len = docs.length; _i < _len; _i++) {
              doc = docs[_i];
              doc.should.have.type('object');
              _this.checkEntryFormatPreJSON(doc);
            }
            return done();
          };
        })(this), (function(_this) {
          return function(err) {
            (err === null).should.be["false"];
            throw err;
          };
        })(this));
      });
      return it('Should return an array of valid objects given a list of valid ID\'s as objectId\'s', function(done) {
        var objectIdList;
        objectIdList = [mongojs.ObjectId("5395ba357b5c62a002b8dc0b", mongojs.ObjectId("5395ba357b5c62a002b8dc0a", mongojs.ObjectId("5395ba357b5c62a002b8dc09")))];
        return this.server._getListOfEntriesById(objectIdList).then((function(_this) {
          return function(docs) {
            var doc, _i, _len;
            for (_i = 0, _len = docs.length; _i < _len; _i++) {
              doc = docs[_i];
              doc.should.have.type('object');
              _this.checkEntryFormatPreJSON(doc);
            }
            return done();
          };
        })(this), (function(_this) {
          return function(err) {
            (err === null).should.be["false"];
            throw err;
          };
        })(this));
      });
    });
  });

}).call(this);
